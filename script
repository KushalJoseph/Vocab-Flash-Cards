#!/usr/bin/env python3
import random
from datetime import date
from strings import *
import yaml

def printf(item: str, color: str=None, style: str=None, newline:bool=False) -> None:
    str = item
    if(color != None):
        color = bcolors.colorFromChar(color)
        str = f"{color}" + str + f" {bcolors.ENDC}"
    if(style != None):
        style = bcolors.styleFromChar(style)
        str = f"{style}" + str 

    if(newline):
        str = "\n\n\n            " + str + "\n\n\n            "
    print(str)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    def colorFromChar(char: str) -> str:
        if(char == 'b'): return bcolors.OKBLUE
        if(char == 'g'): return bcolors.OKGREEN
        if(char == 'c'): return bcolors.OKCYAN
        if(char == 'r'): return bcolors.FAIL
        if(char == 'h'): return bcolors.HEADER
        if(char == 'e'): return bcolors.ENDC
        if(char == 'w'): return bcolors.WARNING

    def styleFromChar(char: str) -> str:
        if(char == 'B'): return bcolors.BOLD
        if(char == 'U'): return bcolors.UNDERLINE

def exitProgram() -> None:
    global forgotten_words
    with open('forgotten.yaml', 'w') as f:
        yaml.dump(list(forgotten_words), f)

    year = date.today().year
    printf(f"Thanks for trying me out! Â© Kushal Joseph {year}", 'w', 'B', True)
    printf(separator, 'h', 'B')
    exit(0)

# ------------------------------------------------------------------------------------------------------------- #

printf(welcome, 'h', 'B')
printf(preGuide, 'c')

advancedMode, forgottenMode, recentWordsMode = False, False, False
printf(modeOption, 'g')
option = input()
if(option.lower() == 'f'):
    forgottenMode = True
elif(option.lower() == 'a'):
    advancedMode = True


recentWordsCnt = 18
recentWordsLen = recentWordsCnt * 3
if(forgottenMode == False):
    option = input(recent_words_option)
    if(option.lower() == 'l' or option.lower() == 'r'):
        recentWordsMode = True
printf(guide, 'g')

filename = './vocab.txt' if not advancedMode else './advanced.txt'
with open(filename, 'r') as file:
    vocab = file.readlines()

words = {}
words_list = []
for i, item in enumerate(vocab):
    if(' - ' in item):
        word, meaning = item.split(' - ')
        word, meaning = word.strip('\n'), meaning.strip('\n')
        sentence = ""
        if(i + 1 < len(vocab) and vocab[i + 1] != ''):
            sentence = vocab[i + 1]
            i += 1
        words_list.append(word)
        words[word] = {'meaning': meaning, 'sentence': sentence}

if(recentWordsMode and len(words_list) > recentWordsLen):
    words_list = words_list[-recentWordsLen:]

forgotten_words_set = set()
read_yaml = yaml.safe_load(open('forgotten.yaml'))
if(read_yaml == None):
    if(forgottenMode): printf(no_forgotten_words, 'r')
    forgottenMode = False
else:
    forgotten_words_set = set(read_yaml)
    if(len(forgotten_words_set) == 0):
        if(forgottenMode): printf(no_forgotten_words, 'r')
        forgottenMode = False
forgotten_words = list(forgotten_words_set)

while(True):
    if(forgottenMode):
        word = random.choice(forgotten_words)
    else:
        word = random.choice(words_list)

    printf(separator, 'h', 'B')
    printf(word, 'g', 'B', True)
    # m for meaning, s for sentence, Return or n for next word, q to quit
    while(True):
        choice = input()
        if(choice.lower() == 'm'):
            printf(words[word]['meaning'], 'c')
        elif(choice.lower() == 's'):
            if(words[word]['sentence'] == ''):
                printf(no_sentence, 'r', None, True)
            else:
                sentence = words[word]['sentence']
                split_sentence = sentence.split(' ')
                output = ""
                for item in split_sentence:
                    if('(' in word):
                        word = word.split('(')[0].strip()
                    if(len(word) <= 3 and word in item.lower()):
                        output += f"{bcolors.UNDERLINE}{bcolors.WARNING}{item}{bcolors.ENDC} "
                    elif(word in item.lower() or word[:-1] in item.lower() or word[:-2] in item.lower()):
                        output += f"{bcolors.UNDERLINE}{bcolors.WARNING}{item}{bcolors.ENDC} "
                    else:
                        output += item + ' '
                printf(output, 'e')
        elif(choice.lower() == 'f'):
            if(forgottenMode):
                printf(already_in_f_mode, 'r')
                break
            if(word not in forgotten_words_set):
                forgotten_words_set.add(word)
                forgotten_words.append(word)
            printf(add_to_forgotten, 'r')
            break
        elif(choice == '' or choice.lower() == 'n'):
            break
        elif(choice.lower() == 'b'):
            word = previousWord
            printf(separator, 'h', 'B') 
            printf(word, 'g', 'B', True)
        elif(choice.lower() == 'q'):
            exitProgram()
        else:
            print(invalid_help, 'r')

    previousWord = word